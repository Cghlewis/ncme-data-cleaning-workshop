# Cleaning in R {.background-secondary}

## Packages

- R has many built in (base) functions
- We can also use functions that live in packages that we can install onto our computer

- Once installed, there are two ways to call packages
  - You may see both methods used in these slides

<br>

::: columns
::: {.column width="50%"}

Using `library()`

```{r echo=TRUE, eval=FALSE}
library(dplyr)

mtcars |>  
  select(mpg, cyl) 

```
:::

::: {.column width="50%"}

Using Namespacing `package::function()`

```{r echo=TRUE, eval=FALSE}

# library(dplyr) not needed

mtcars |>  
  dplyr::select(mpg, cyl) 

```
:::
:::


## Tidyverse

<br>

An opinionated collection of R packages designed for data science

All packages share an underlying design philosophy, grammar, and data structures

<br>

::: {layout-nrow=4}

![](images/dplyr.png)
![](images/tidyr.png)
![](images/stringr.png)
![](images/readr.png)
![](images/purrr.png)

:::

## Tidyverse

<br>

Selecting `test_score` and `grade_level` from our data frame named `sch_data`

<br>

::: columns
::: {.column width="50%"}

[Tidy Evaluation](https://dplyr.tidyverse.org/articles/programming.html)

<br>

```{r echo=FALSE}

sch_data <- tibble::tribble(~test_score, ~grade_level,
                350, 3,
                380, 4,
                290, 3)

```

```{r echo=TRUE}

select(sch_data, test_score, 
       grade_level)

```
:::

::: {.column width="50%"}

Base R

<br>

```{r echo=TRUE}

sch_data[ , c("test_score", 
              "grade_level")]

```
:::
:::

## Pipes

-   2014+ magrittr pipe `%>%`

-   2021+ (R $\geq$ 4.1.0) native R pipe `|>`

. . .

Isabella VelÃ¡squez's blog post [*Understanding the native R pipe* \|\>](https://ivelasq.rbind.io/blog/understanding-the-r-pipe/) (2022)

<br>

. . .

::: columns
::: {.column width="50%"}
```{r echo=TRUE, eval=FALSE}

sch_data <- select(sch_data, id, 
                    test_score)

sch_data <- filter(sch_data, 
                    test_score > 300)

```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: false

sch_data <- sch_data |>
  select(id, test_score) |>
  filter(test_score > 300)

```
:::
:::

. . .

<br>

To turn on the native pipe:

`Tools` â†’ `Global Options` â†’ `Code` â†’ `Editing` â†’ `Use Native Pipe Operator`

## Open our data

<br>

:::: {.columns}

::: {.column width="40%"}

<br>

### Take 5 minutes to open and look at our data file.

1. Log in to Posit Cloud and navigate to our project
2. Open the data folder and open "sample_tch_svy_raw.csv"

:::
 
::: {.column width="60%"}

<br>

![](images/sample-data.PNG){fig-align="center"}

```{r}
#| echo: false
#| cache: false
countdown(minutes = 5, font_size = "2em")

```

:::
:::

## Import our data

<br>

Common data importing functions

- `read_csv()` from the `readr` package

- `read_excel()` from the `readxl` package

- `read_sav()` from the `haven` package

- Learn more about importing multiple files at once [here](https://github.com/Cghlewis/data-wrangling-functions/wiki/Import-Files)

<br>

. . .

**Which function should we use to read in our sample data?**ðŸ¤”

## Import our file

::: columns
 
::: {.column width="50%"}

- `read_excel()` has several arguments. 
  - path
  - sheet = NULL
  - col_names = TRUE
  - na = ""
  - skip = 0
- Type `?read_excel()` in your console to see more arguments

:::

::: {.column width="50%"}

![](images/read_excel.PNG){fig-align="center"}

:::
:::


## [Exercise]{style="color:#ccd64d"}{.background-secondary}

<br>

### Take 3 minutes to import the data.

<br>

1. Open "exercises.Rmd" in our Posit Cloud project.
2. Navigate to exercise 1.
3. Update the code and run the code chunk using the green arrow.
4. If you get stuck, you can open "solutions.Rmd"

```{r}
#| echo: false
#| cache: false
countdown(minutes = 3, font_size = "2em")

```

## Review our data

::: columns
::: {.column width="50%"}

- How many rows?
  - In this hypothetical situation, we assume we are not missing any cases
  - However, there may be duplicates
- How many columns?
  - Compare to our data dictionary
- What are the variable values and ranges?
  - Compare to our data dictionary
- How much missing data do we have?

:::

::: {.column width="50%"}

There are several functions we can use to explore data

- `dplyr::glimpse()`
- `skimr::skim()`
- `base::summary()`
- `summarytools::dfSummary()`
- `Hmisc::describe()`

:::
:::

## [Exercise]{style="color:#ccd64d"}{.background-secondary}

<br>

### Take 5 minutes to review our data.

1. Navigate to exercise 2.
2. Run the code. 
    - Write down any potential issues you see in the data.
3. Open "sample_tch_svy_data_dictionary.xlsx". 
    - What issues do you see when you compare the data to our data dictionary?
4. Review "sample_tch_svy_cleaning-plan.txt". 
    - How does it compare to the issues you wrote down?

```{r}
#| echo: false
#| cache: false
countdown(minutes = 5, font_size = "2em")

```
