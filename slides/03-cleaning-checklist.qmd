# Data Cleaning Checklist {.background-secondary}

## Data Cleaning

![](images/side-by-side-data.PNG){fig-align="center"}


## Standard Data Cleaning Checklist

:::: {.columns}

::: {.column width="50%"}

`r fontawesome::fa("check")` Import the raw data

`r fontawesome::fa("check")` Review the raw data

`r fontawesome::fa("check")` Find missing data

`r fontawesome::fa("check")` Adjust the sample

`r fontawesome::fa("check")` De-identify data

`r fontawesome::fa("check")` Drop irrelevant columns

`r fontawesome::fa("check")` Split columns

`r fontawesome::fa("check")` Rename variables

`r fontawesome::fa("check")` Normalize variables

`r fontawesome::fa("check")` Standardize variables

:::
 
::: {.column width="50%"}

`r fontawesome::fa("check")` Update variable types

`r fontawesome::fa("check")` Recode variables

`r fontawesome::fa("check")` Construct new variables

`r fontawesome::fa("check")` Add missing values

`r fontawesome::fa("check")` [Add metadata](https://github.com/Cghlewis/data-wrangling-functions/wiki/Label-Data)

`r fontawesome::fa("check")` Validate data

`r fontawesome::fa("check")` [Join data](https://cghlewis.com/blog/joins/)

`r fontawesome::fa("check")` [Reshape data](https://osf.io/xumg4)

`r fontawesome::fa("check")` Save clean data

:::
:::


## Import raw data

![](images/checklist1.PNG){fig-align="center"}


## Review data

![](images/checklist2.PNG){fig-align="center"}

::: {.notes}

Reviewing your data should always be step number two. It's important that you know exactly what is happening in your data before moving forward in the cleaning process.

If you have access to those documents we discussed earlier, participant tracking database and a data dictionary, now is the time to use them.

:::

## Find missing data

![](images/checklist3.PNG){fig-align="center"}

::: {.notes}

If you find that any data is missing in your review process (missing cases/missing variables) you'll want to retrieve that missing data before moving forward in the cleaning process

Start back at step 1

:::

## Adjust the sample

![](images/checklist4.PNG){fig-align="center"}


## De-identify data

![](images/checklist5-1.PNG){fig-align="center"}

## De-identify data

![](images/checklist5-2.PNG){fig-align="center"}

## De-identify data

![](images/checklist5-3.PNG){fig-align="center"}

|Source|Resource|
|--------|-----------|
|[Alena Filip](https://www.sjsu.edu/research/docs/irb-data-management-handbook.pdf) |Table 2 provides pros and cons of various de-identification methods|
|[J-PAL](https://www.povertyactionlab.org/resource/data-de-identification)| Table 3 provides a list of direct and indirect identifiers and recommended removal methods|
|[Schatschneider, et.al](https://figshare.com/articles/preprint/De-Identification_Guide/13228664)| Deidentifying Data Guide|

## Drop irrelevant columns

<br>

![](images/checklist6.PNG){fig-align="center"}

## Split columns

![](images/checklist7.PNG){fig-align="center"}

## Rename variables

![](images/checklist8.PNG){fig-align="center"}

## Normalize variables

- Compare the variable types in your raw data to the types you expected in your data dictionary. 
  - Do they align? If not, what needs to be done so that they do

![](images/checklist9.PNG){fig-align="center"}


## Standardize variables

- Are columns consistently measured, categorized, and formatted according to your data dictionary?
  - If not, what needs to be done so that they are

![](images/checklist10.PNG){fig-align="center"}


## Update variable types

![](images/checklist11.PNG){fig-align="center"}


## Recode variables

![](images/checklist12.PNG){fig-align="center"}



## Construct additional variables

![](images/checklist13.PNG){fig-align="center"}


## Add missing values

![](images/checklist14.PNG){fig-align="center"}


## Data validation

::: columns

::: {.column width="50%"}

![](images/checklist15-1.PNG)

:::

::: {.column width="50%"}

::: {layout-nrow=2}

![](images/checklist15-2.PNG)

![](images/checklist15-3.PNG)

:::

:::
:::

## Data validation

:::: {.columns}

::: {.column width="60%"}

- Complete
  - Check for missing/duplicate cases
    - Check Ns by groups for completeness
  - Check for missing/too many columns
- Valid and consistent
  - Check for unallowed categories/values out of range
    - Check ranges by groups
  - Check for invalid, non-unique, or missing study IDs
  - Check for incorrect variable types/formats
  - Check missing value patterns

:::
 
::: {.column width="40%"}

- Accurate
  - Agreement across variables
- De-identified
  - All direct identifiers are removed
  - All indirect identifiers managed as needed
- Interpretable
  - Variables correctly named

:::
:::


## Data validation

:::: {.columns}

::: {.column width="60%"}

1. Documentation errors
    - Fix in documentation
2. Data cleaning errors
    - Fix in your cleaning process
3. Data entry/export process errors
    - Fix at the source and export new raw file
4. True values that are inaccurate, uninterpretable, or outside of a valid range
    - Leave the data as is (document the issue)
    - Recode those values to designated error code
    - Create data quality indicators
    - Choose one source of truth for inconsistent values
    - Use logical/deductive editing
    
:::
 
::: {.column width="40%"}

![](images/checklist15-4.PNG){fig-align="center"}

:::
:::

## Export data

<br>

![](images/checklist16.jpg){fig-align="center"}

## Export data

When you export your files, it's important to name them consistently and clearly.

- Follow rules similar to our variable naming rules
  - Machine-readable (except now `-` is allowed)
  - Human-readable
    - A user should be able to understand what the file contains without opening it

<br>

Which gives you a better idea of what is in the file? ðŸ¤”

  - "Project X Full Data.csv"
  - "projectx_wave1_stu_svy_clean.csv"


## Creating a data cleaning plan

![](images/data_cleaning_plan.PNG){fig-align="center"}


## BREAK!

![](https://media1.tenor.com/m/XFNnJtXYH_gAAAAC/dog-wipe-face.gif){fig-align="center" width=80%}

## BREAK!

```{r}
#| echo: false
#| cache: false
countdown(minutes = 15, font_size = "10em", style = "position: relative; width: min-content;")

```
